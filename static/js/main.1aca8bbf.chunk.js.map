{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","text","setText","useState","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","handleUpperClick","newText","toUpperCase","showAlert","handleLowerClick","toLowerCase","handleAlternateClick","i","length","handleInverseClick","newtext","handleCapitalise","handle","split","map","word","charAt","slice","join","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpaces","handleClearClick","filter","Boolean","Alert","alert","lower","capitalize","msg","defaultProps","about","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.1aca8bbf.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\n/* Navbar is the component and title, home, about etc are the props that can be changed by passing value in component in App.js file */\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/About\">{props.about}</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\n/* define that the value passed in navbar must follow the data/prop type assigned */\r\nNavbar.propTypes = {\r\n\r\n    /* title: PropTypes.string.isRequired,      \r\n    makes the value in title and its type compulsory ( either from App.js or defaultProps declaration ) or will throw error */\r\n\r\n    title: PropTypes.string,\r\n    about: PropTypes.string.isRequired\r\n}\r\n\r\n/* when any particular value are not passed in navbar then these will display respectively */\r\nNavbar.defaultProps = {\r\n    title: 'This is the Title',\r\n    about: 'About'\r\n}","import React, { useState } from 'react';\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, setText] = useState('');    //hook\r\n\r\n    const handleUpperClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Upper Case\", \"success\");\r\n    }\r\n\r\n    const handleLowerClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lower Case\", \"success\");\r\n    }\r\n\r\n    const handleAlternateClick = () => {\r\n        let newText = '';\r\n        for (let i = 0; i < text.length; i++) {\r\n            if (i % 2 === 0) {\r\n                newText += text[i].toUpperCase();\r\n            } else {\r\n                newText += text[i].toLowerCase();\r\n            }\r\n        }\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Alternate Case\", \"success\");\r\n    }\r\n\r\n    const handleInverseClick = () => {\r\n        let newtext = \"\";\r\n        for (let i = text.length - 1; i >= 0; i--) {\r\n            newtext += text[i];\r\n        }\r\n        setText(newtext);\r\n        props.showAlert(\"Converted to Inverse Case\", \"success\");\r\n    };\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to Clipboard\", \"success\");\r\n    };\r\n\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared\", \"success\");\r\n    }\r\n\r\n    const handleCapitalise = () => {\r\n        const words = text.split(' ');\r\n        const capitalizedWords = words.map(word => word.charAt(0).toUpperCase() + word.slice(1));\r\n        const handle = capitalizedWords.join(' ');\r\n        setText(handle);\r\n        props.showAlert(\"Text is Capitalized\", \"success\");\r\n    };\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed Extra Spaces\", \"success\");\r\n    }\r\n\r\n    /* hook - make it easier to reuse logic between components, manage state, and do other things in functional components */\r\n    /* text = \"wrong way to change the state and type of component\"; \r\n    setText(\"New Text\"); ----  Correct way to change the state */\r\n\r\n    return (\r\n        <>\r\n            <div className='container' style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"myBox\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} rows=\"8\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleUpperClick}>\r\n                    UPPER CASE\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleLowerClick}>\r\n                    lower case\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleAlternateClick}>\r\n                    AlTeRnAtE CaSe\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleInverseClick}>\r\n                    Inverse Case\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCapitalise}>\r\n                    Capitalize Case\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\r\n                    Copy\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>\r\n                    Remove Extra Spaces\r\n                </button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n                    Clear Text\r\n                </button>\r\n            </div>\r\n            <div className='container my-3' style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h2>Your Text Summary</h2>\r\n                <p> Words {text.split(\" \").filter(Boolean).length} || Characters {text.length} || Sentence Count {text.split(\".\").filter(Boolean).length} || Line Count {text.split(\"\\n\").filter(Boolean).length} </p>\r\n                <p>{0.008 * text.split(\" \").filter(Boolean).length} Time taken to read in minutes.</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Enter something in the Textbox above to Preview it here..\"}</p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {props.alert && (\r\n                <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                    <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //tells whether dark mode is enable or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode has been Enabled\", \"success\");\n      document.title = \"TextUtils : Dark Mode\";\n      // setInterval(() => {\n      //   document.title = \"TextUtils is Amazing\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \" Install TextUtils Now\";\n      // }, 1500);\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been Enabled\", \"success\");\n      document.title = \"TextUtils : Light Mode\";\n    }\n  }\n\n  return (\n    <>\n      {/* since routing do not work well with github pages we are not using routing in this react project\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/About\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm showAlert={showAlert} heading=\"Enter text to Analyze below\" mode={mode} />\n            </Route>\n          </Switch>\n        </div>\n      </Router> */}\n\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        <TextForm showAlert={showAlert} heading=\"Enter text to Analyze below\" mode={mode} />\n      </div>\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}